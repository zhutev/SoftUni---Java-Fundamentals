package RegexExercise;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.awt.SystemColor.text;

public class P04StarEnigma {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        List<String> attackedPlanets = new ArrayList<>();
        List<String> destroyedPlanets = new ArrayList<>();

        String regex = "@(?<planetName>[A-Za-z]+)[^@\\-!:>]*:(?<population>[0-9]+)[^@\\-!:>]*!(?<attackType>[AD])![^@\\-!:>]*->(?<soldiersCount>[0-9]+)";
        Pattern pattern = Pattern.compile(regex);

        for (int i = 1; i <= n; i++) {
            String currentMessage = scanner.nextLine(); // криптираното съобщение
            String decryptedMessage = getDecryptedMessage(currentMessage); // декриптираното съобщение

            Matcher matcher = pattern.matcher(decryptedMessage);

            if (matcher.find()) {
                String planetName = matcher.group("planetName");
                String attackType = matcher.group("attackType");

                if (attackType.equals("A")) {
                    attackedPlanets.add(planetName);

                } else if (attackType.equals("D")) {
                    destroyedPlanets.add(planetName);
                }
            }
        }

        System.out.println("Attacked planets: " + attackedPlanets.size());
        Collections.sort(attackedPlanets); // сортираме планените по име / азбучен ред
        attackedPlanets.forEach(planet -> System.out.println("-> " + planet));

        System.out.println("Destroyed planets: " + destroyedPlanets.size());
        Collections.sort(destroyedPlanets); // сортираме планените по име / азбучен ред
        destroyedPlanets.forEach(planet -> System.out.println("-> " + planet));
    }

    private static String getDecryptedMessage(String currentMessage) {
        // брой на съвпаденията от специалните символи (в метод countSpecialLetters)
        int countLetters = countSpecialLetters(currentMessage);

        // тук ще запаваме новото/декриптирано съобщение
        StringBuilder decryptedMessage = new StringBuilder();

        // цикъл който от всеки символ в подадения текст (currentMessage) ще извади стойността countLetters
        // и ще добави полученият нов симво в StringBuilder-a (decryptedMessage)!
        for (char symbol : currentMessage.toCharArray()) {
            char newSymbol = (char) (symbol - countLetters);
            decryptedMessage.append(newSymbol);

        }

        return decryptedMessage.toString();
    }

    private static int countSpecialLetters(String currentMessage) {
        // метод, който брои съвпаденията на символите s,t,a,r,S,T,A,R
        int countKey = 0;
        for (char symbol : currentMessage.toCharArray()) {
            switch (symbol) {
                case 's':
                case 't':
                case 'a':
                case 'r':
                case 'S':
                case 'T':
                case 'A':
                case 'R':
                    countKey++;
                    break;
            }
        }

        return countKey;
    }
}
